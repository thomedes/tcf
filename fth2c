#! /usr/bin/python3
# -*- python -*-

import sys

EOL = False

current_file = ""
current_line = 0
current_cursor = 0

#-----------------------------------------------------------------------------
def error(msg):
    global current_file, current_line, current_cursor

    sys.stdout.flush()
    print("\n%s:%d:%d: error: %s" %
          (current_file, current_line, current_cursor, msg),
          file=sys.stderr, flush=True)
    exit(1)

#-----------------------------------------------------------------------------
def get_next_character_(f):
    previous_was_eol = False
    """Reads one character from the given textfile"""
    while True:
        global current_line, current_cursor

        if previous_was_eol:
            current_line = current_line + 1
            current_cursor = 0
        c = f.read(1)
        if c:
            current_cursor = current_cursor + 1
            previous_was_eol = c == '\n'
            yield c
        else:
            current_cursor = 0
            previous_was_eol = False
            break
    yield EOL

#-----------------------------------------------------------------------------
def lex(file):
    """Split file in tokens, a token being a sequence of non space chars
    or a newline"""

    global current_file, current_line

    token = ""
    try:
        with open(file, 'rt', encoding="utf-8") as f:
            # nonlocal current_file, current_line

            current_file = file
            current_line = 1

            for c in get_next_character_(f):
                # print("p> '%s' (\"%s\")" % (c, token))
                if EOL == c or c.isspace():
                    if token != '':
                        yield token
                        token = ''
                    if c == '\n':
                        yield c
                else:
                   token += c

    except FileNotFoundError:
        error('Error opening file "%s": File not found' % file)

#-----------------------------------------------------------------------------
def parse(tokens):
    """Join tokens into functions while skipping comments"""

    status = 'code'

    fn = []
    for tk in tokens:
        # print("p> ", tk)
        if status == 'code':
            if tk == '(' :
                status = 'in parent comment'
            elif tk == '\\':
                status = 'in backslash comment'
            elif tk != '\n':
                fn += [tk]
                if tk == ';':
                    yield fn
                    fn = []
        elif ((status == 'in parent comment' and tk == ')')
               or (status == 'in backslash comment' and tk == '\n')):
            status = 'code'

#-----------------------------------------------------------------------------
def compile(functions):
    here = 0

    def cell(value):
        nonlocal here

        print("    (cell) (%s)," % value)
        here = here + 1

    def word(w):     cell("forth_rom + %s" % (words[w] + 2))

    previous_word = 'NULL';
    words = {}

    print("const cell forth_rom[] = {");
    for fn in functions:
        print(fn, file=sys.stderr)
        w_name    = fn[1]
        w_offset  = here

        words[w_name] = here

        cell(previous_word)
        cell('"%s"' % w_name)

        if fn[0] == 'c:':
            w_codeword = fn[2]
            del fn[2]
        else:
            w_codeword = 'do_colon'

        cell("&" + w_codeword)
        for w in fn[2:]:
            if w == ';':
                cell(0)                 # EXIT
            elif w in words:
                word(w)
            else:
                try:
                    val = int(w)
                except ValueError:
                    print('words: ', sorted(words.keys()), file=sys.stderr)
                    error('"%s" is neither a known word nor a valid number' % w)
                word('LITERAL')
                cell(val)
        previous_word = "forth_rom + %s" % w_offset
    print("};");
    return previous_word

#-----------------------------------------------------------------------------
def usage():
    exit(1)

#-----------------------------------------------------------------------------
def main():
    latest = compile(parse(lex(sys.argv[1])))
    print("const cell forth_rom_latest = (cell) (%s);" % latest);

#-----------------------------------------------------------------------------
if __name__ == '__main__':
    main()
