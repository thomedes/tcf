#! /usr/bin/python3
# -*- python -*-
"""Forth precompiler. Outputs a rom image in C format"""

import re, sys

EOL = False

current_file = ""
current_line = 0
current_cursor = 0

#-----------------------------------------------------------------------------
def error(msg):
    global current_file, current_line, current_cursor

    sys.stdout.flush()
    print("\n%s:%d:%d: error: %s" %
          (current_file, current_line, current_cursor, msg),
          file=sys.stderr, flush=True)
    exit(1)

#-----------------------------------------------------------------------------
def get_next_character_(f):
    previous_was_eol = False
    """Reads one character from the given textfile"""
    while True:
        global current_line, current_cursor

        if previous_was_eol:
            current_line = current_line + 1
            current_cursor = 0
        c = f.read(1)
        if c:
            current_cursor = current_cursor + 1
            previous_was_eol = c == '\n'
            yield c
        else:
            current_cursor = 0
            previous_was_eol = False
            break
    yield EOL

#-----------------------------------------------------------------------------
def lex(file):
    """Split file in tokens, a token being a sequence of non space chars
    or a newline"""

    global current_file, current_line

    token = ""
    try:
        with open(file, 'rt', encoding="utf-8") as f:
            # nonlocal current_file, current_line

            current_file = file
            current_line = 1

            for c in get_next_character_(f):
                # print("p> '%s' (\"%s\")" % (c, token))
                if EOL == c or c.isspace():
                    if token != '':
                        yield token
                        token = ''
                    if c == '\n':
                        yield c
                else:
                   token += c

    except FileNotFoundError:
        error('Error opening file "%s": File not found' % file)

#-----------------------------------------------------------------------------
def parse(tokens):
    """Join tokens into functions while skipping comments"""

    status = 'code'

    fn = []
    for tk in tokens:
        # print("p> ", tk)
        if status == 'code':
            if tk == '(' :
                status = 'in parent comment'
            elif tk == '\\':
                status = 'in backslash comment'
            elif tk != '\n':
                fn += [tk]
                if tk == ';' and len(fn) > 2 :
                    yield fn
                    fn = []
        elif ((status == 'in parent comment' and tk == ')')
               or (status == 'in backslash comment' and tk == '\n')):
            status = 'code'

#-----------------------------------------------------------------------------
def bytes2cell(bytes, endiannes):
    assert endiannes in ['big-endian', 'little-endian'];
    if endiannes == 'little-endian': bytes = reversed(bytes)
    return '0x' + ''.join(["%02X" % b for b in bytes])

#-----------------------------------------------------------------------------
def str2cells(str, cell_size, endiannes, with_length):
    if with_length:
        l = len(str)  # Do it in two steps to avoid problems
        str = chr(l) + str
    cells = []
    while str:
        bytes = ([ord(c) for c in str] + [0] * cell_size)[0:cell_size]
        cells.append(bytes2cell(bytes, endiannes))
        str = str[cell_size:]
    return cells

#-----------------------------------------------------------------------------
def compile(cell_size, endiannes, functions):
    here = 0
    rom = []

    def mkcomment(s):
        return '/* %-5s */' % s.replace('*/', '* /')

    def cell_build(value, comment = None):
        if comment:
            return "    (cell) (%-18s), %s" % (value, mkcomment(comment))
        else:
            return "    (cell) (%-18s)," % value

    def cell(value, comment = None):
        nonlocal here
        rom.append(cell_build(value, comment))
        here = here + 1

    def word(w):
        assert w in words
        cell("forth_rom + %3s" % words[w]['cfa'], w)

    previous_word = 'NULL';
    words = {}
    stack = []

    print("const cell forth_rom[] = {");
    for fn in functions:
        assert len(fn) > 2, "Invalid fn: %s" % fn

        begins = []

        # print(fn, file=sys.stderr)
        w_name    = fn[1]
        w_offset  = here

        if w_name in words: error('Duplicate word "%s"' % w_name)
        words[w_name] = { "start": here }

        cell(previous_word)
        rom[-1] = '\n    %s\n' % mkcomment(w_name) + rom[-1]
#        cell('"%s"' % w_name)
        name_cells = str2cells(w_name, cell_size, endiannes, True)
        for c in name_cells: cell(c)

        # codeword (and save cfa)

        words[w_name]['cfa'] = here
        if fn[0] == 'c:':
            w_codeword = fn[2]
            del fn[2]
        else:
            w_codeword = 'do_colon'

        cell("&" + w_codeword)
        next_is_literal = next_is_char = False
        for w in fn[2:]:
            if next_is_literal:
                cell(w, str(w))
                next_is_literal = False
            elif next_is_char:
                cell("'%s'" % w[0])
                next_is_char = False
            elif w == ';':
                cell(0, "EXIT")                 # EXIT
            elif w == 'CHAR':
                word('LITERAL')
                next_is_char = True
            elif w == 'BEGIN':
                begins.append(here)
                print("begins: %s" % begins, file=sys.stderr)
            elif w == 'AGAIN':
                assert len(begins) > 0
                word('BRANCH')
                cell(begins[-1] - here)
                del begins[-1]
            elif w == 'UNTIL':
                assert len(begins) > 0
                word('0BRANCH')
                cell(begins[-1] - here)
                del begins[-1]
            elif w == 'IF':
                word('0BRANCH')
                stack.append(here)
                cell(0)
            elif w == 'ELSE':
                pass
            elif w == 'THEN':
                if_offset_addr = stack[-1]
                del(stack[-1])
                rom[if_offset_addr] = cell_build(here - if_offset_addr)
            elif w == 'BRANCH':
                word(w)
                next_is_literal = True
            elif w in words:
                word(w)
            else:
                try:
                    val = int(w)
                except ValueError:
                    print('words: ', sorted(words.keys()), file=sys.stderr)
                    error('"%s" is neither a known word nor a valid number' % w)
                word('LITERAL')
                cell(val, str(val))
        assert len(begins) == 0
        previous_word = "forth_rom + %s" % w_offset
    for cell in rom: print(cell)
    print("};");
    print(mkcomment('ROM SIZE: %d cells, %d bytes' % (here, 4 * here)))
    return previous_word

#-----------------------------------------------------------------------------
def usage():
    exit(1)

#-----------------------------------------------------------------------------
def main():
    bits = int(sys.argv[1])
    assert bits in [16, 32, 64]
    cell_size = bits // 8

    endiannes = sys.argv[2]
    assert endiannes in ['big-endian', 'little-endian'];

    file = sys.argv[3]

    latest = compile(cell_size, endiannes, parse(lex(file)))
    print("const cell forth_rom_latest = (cell) (%s);" % latest);

#-----------------------------------------------------------------------------
if __name__ == '__main__':
    main()
